{"version":3,"sources":["components/Book.js","containers/BookList.js","actions/index.js","actions/constants.js","containers/BookForm.js","components/App.js","reducers/books.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["Book","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","props","id","title","category","React","Component","BookList","inventory","map","book","idx","Book_Book","connect","state","books","dispatch","removeBookBtn","bookId","type","categories","BookForm","_this","call","handleChange","event","setState","target","handleSubmit","submitNewBook","bind","assertThisInitialized","name","onChange","placeholder","onClick","createBook","App","containers_BookForm","containers_BookList","initialState","Reducers","length","undefined","action","objectSpread","concat","toConsumableArray","filter","removeBook","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","es","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.960cc103.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Book extends React.Component {\n  render() {\n    return (\n      <tr className = 'tableRow' key = { this.props.key }>\n        <td>{ this.props.id }</td>\n        <td>{ this.props.title }</td>\n        <td>{ this.props.category }</td>\n      </tr>\n    );\n  }\n}\n","import React from 'react';\nimport { Book } from '../components/Book';\nimport { connect } from 'react-redux';\nimport { removeBook } from '../actions/index';\n\nimport '../css/BookList.css';\n\nclass BookList extends React.Component {\n\n  render() {\n    return(\n      <div className = 'BookList'>\n        <table className = 'table'>\n          <tr className = 'tableHeader'>\n            <th className = 'id'>Id</th>\n            <th className = 'title'>Title</th>\n            <th className = 'category'>Category</th>\n          </tr>\n          { this.props.inventory.map( (book, idx) => (\n            <Book\n              key = { idx }\n              id = { book.id }\n              title = { book.title }\n              category = { book.category }\n            />\n          ))}\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    inventory: state.books\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    removeBookBtn: bookId => {\n      dispatch(removeBook(bookId));\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookList);\n","// define all redux actions\nimport { CREATE_BOOK, REMOVE_BOOK, GET_BOOKS } from './constants';\n\nexport const createBook = book => {\n  return {\n    type: CREATE_BOOK,\n    book: book\n  }\n}\n\nexport const removeBook = id => {\n  return {\n    type: REMOVE_BOOK,\n    id: id\n  }\n}\n\nexport const getBooks = () => {\n  return {\n    type: GET_BOOKS\n  }\n}\n","export const CREATE_BOOK = 'CREATE_BOOK';\nexport const REMOVE_BOOK = 'REMOVE_BOOK';\nexport const GET_BOOKS = 'GET_BOOKS';\n","import React from 'react';\nimport '../css/BookForm.css';\n\nimport { connect } from 'react-redux';\nimport { createBook } from '../actions/index';\n\nconst categories = ['Action','Biography','History','Horror','Kids','Learning','Sci-Fi'];\n\nclass BookForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { id: 1, title: '', category: 'Action' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange = event => {\n    this.setState({\n      title: event.target.value\n    });\n  }\n\n  handleSubmit = () => {\n    this.props.submitNewBook(this.state)\n    this.setState({\n      id: (this.state.id + 1),\n      title: '',\n      category: 'Action'\n    });\n  }\n\n  render() {\n    return (\n      <form className = 'BookForm'>\n        <input className = 'bookFormInput' type = 'text' name = 'title' value = { this.state.title } onChange = { this.handleChange } placeholder = 'Title'/>\n        <select className = 'bookFromSelector' name = 'categories'>\n          { categories.map( category => (\n            <option value = { category }>{ category }</option>\n          ))}\n        </select>\n        <button className = 'bookFormBtn' onClick = { this.handleSubmit }>Add Book</button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    // id: state.id,\n    // title: state.title,\n    // category: state.category\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submitNewBook: book => {\n      dispatch(createBook(book));\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookForm)\n","import React from 'react';\nimport BookList from '../containers/BookList';\nimport BookForm from '../containers/BookForm';\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <div className='App'>\n        <BookForm />\n        <BookList />\n      </div>\n    );\n  }\n}\n","// store function actions for books\nimport { CREATE_BOOK, REMOVE_BOOK, GET_BOOKS } from '../actions/constants'\n\nconst initialState = {\n  books: [\n    {id: 1234, title: \"abcd\", category: 'Kids'},\n    {id: 2345, title: \"birds\", category: 'Learning'},\n    {id: 3456, title: \"USA\", category: 'History'}\n  ]\n}\n\nexport const bookReducer = ( state = initialState, action ) => {\n  switch (action.type) {\n    case CREATE_BOOK:\n      return {\n        ...state,\n        books: [ action.book, ...state.books ]\n       }\n    case REMOVE_BOOK:\n      return {\n        ...state,\n        books: state.books.filter( book => book.id !== action.removeBook )\n      }\n    case GET_BOOKS:\n      return {\n        ...state,\n        books: [...state.books]\n      }\n    default:\n      return state\n  }\n}\n","// combine all reducers\n\n// import { combineReducers } from 'redux';\nimport { bookReducer } from './books';\n\n// export const Reducers = combineReducers({\n//   inventory: bookReducer,\n// });\n\nexport const Reducers = bookReducer;\n","import { createStore } from 'redux';\nimport { Reducers } from './reducers/index';\n\nexport const store = createStore(Reducers);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components/App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store = { store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}